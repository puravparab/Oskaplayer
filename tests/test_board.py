import sys
import unittest

sys.path.insert(0, '..')

from src.engine.board import *

class TestMovePiece(unittest.TestCase):
	def test_ai_move_forward(self):
		# Move W to the diagonally adjacent space to its right
		self.assertEqual(
			move_piece([
				['W', '*', 'W', '*', 'W', '*', 'W'], 
				['*', '_', '*', '_', '*', '_', '*'], 
				['*', '*', '_', '*', '_', '*', '*'],
				['*', '_', '*', '_', '*', '_', '*'], 
				['B', '*', 'B', '*', 'B', '*', 'B']],
				"W", False, [0,0], [1,1]),
			[[
				['_', '*', 'W', '*', 'W', '*', 'W'], 
				['*', 'W', '*', '_', '*', '_', '*'], 
				['*', '*', '_', '*', '_', '*', '*'],
				['*', '_', '*', '_', '*', '_', '*'], 
				['B', '*', 'B', '*', 'B', '*', 'B']],
				"Valid move"
			],
			None
		)

		self.assertEqual(
			move_piece([
				['_', '*', 'W', '*', 'W', '*', 'W'], 
				['*', 'W', '*', '_', '*', '_', '*'], 
				['*', '*', '_', '*', '_', '*', '*'],
				['*', '_', '*', '_', '*', '_', '*'], 
				['B', '*', 'B', '*', 'B', '*', 'B']],
				"W", False, [1,1], [2,2]),
			[[
				['_', '*', 'W', '*', 'W', '*', 'W'], 
				['*', '_', '*', '_', '*', '_', '*'], 
				['*', '*', 'W', '*', '_', '*', '*'],
				['*', '_', '*', '_', '*', '_', '*'], 
				['B', '*', 'B', '*', 'B', '*', 'B']],
				"Valid move"
			],
			None
		)

		# Move B to the diagonally adjacent space to its right
		self.assertEqual(
			move_piece([
				['B', '*', 'B', '*', 'B', '*', 'B'], 
				['*', '_', '*', '_', '*', '_', '*'], 
				['*', '*', '_', '*', '_', '*', '*'],
				['*', '_', '*', '_', '*', '_', '*'], 
				['W', '*', 'W', '*', 'W', '*', 'W']],
				"B", False, [0,0], [1,1]),
			[[
				['_', '*', 'B', '*', 'B', '*', 'B'], 
				['*', 'B', '*', '_', '*', '_', '*'], 
				['*', '*', '_', '*', '_', '*', '*'],
				['*', '_', '*', '_', '*', '_', '*'], 
				['W', '*', 'W', '*', 'W', '*', 'W']],
				"Valid move"
			],
			None
		)

		# Move W forward to an invalid empty space
		self.assertEqual(
			move_piece([
				['W', '*', 'W', '*', 'W', '*', 'W'], 
				['*', '_', '*', '_', '*', '_', '*'], 
				['*', '*', '_', '*', '_', '*', '*'],
				['*', '_', '*', '_', '*', '_', '*'], 
				['B', '*', 'B', '*', 'B', '*', 'B']],
				"W", False, [0,0], [1,3]),
			[[
				['W', '*', 'W', '*', 'W', '*', 'W'], 
				['*', '_', '*', '_', '*', '_', '*'], 
				['*', '*', '_', '*', '_', '*', '*'],
				['*', '_', '*', '_', '*', '_', '*'], 
				['B', '*', 'B', '*', 'B', '*', 'B']],
				"Invalid move"
			],
			None
		)

		# Move W forward to an invalid void space
		self.assertEqual(
			move_piece([
				['W', '*', 'W', '*', 'W', '*', 'W'], 
				['*', '_', '*', '_', '*', '_', '*'], 
				['*', '*', '_', '*', '_', '*', '*'],
				['*', '_', '*', '_', '*', '_', '*'], 
				['B', '*', 'B', '*', 'B', '*', 'B']],
				"W", False, [0,0], [1,2]),
			[[
				['W', '*', 'W', '*', 'W', '*', 'W'], 
				['*', '_', '*', '_', '*', '_', '*'], 
				['*', '*', '_', '*', '_', '*', '*'],
				['*', '_', '*', '_', '*', '_', '*'], 
				['B', '*', 'B', '*', 'B', '*', 'B']],
				"Invalid move"
			],
			None
		)

		# Move W forward to space below it
		self.assertEqual(
			move_piece([
				['W', '*', 'W', '*', 'W', '*', 'W'], 
				['*', '_', '*', '_', '*', '_', '*'], 
				['*', '*', '_', '*', '_', '*', '*'],
				['*', '_', '*', '_', '*', '_', '*'], 
				['B', '*', 'B', '*', 'B', '*', 'B']],
				"W", False, [0,0], [1,0]),
			[[
				['W', '*', 'W', '*', 'W', '*', 'W'], 
				['*', '_', '*', '_', '*', '_', '*'], 
				['*', '*', '_', '*', '_', '*', '*'],
				['*', '_', '*', '_', '*', '_', '*'], 
				['B', '*', 'B', '*', 'B', '*', 'B']],
				"Invalid move"
			],
			None
		)

		# Make W do an illegal jump to an empty space
		self.assertEqual(
			move_piece([
				['W', '*', 'W', '*', 'W', '*', 'W'], 
				['*', '_', '*', '_', '*', '_', '*'], 
				['*', '*', '_', '*', '_', '*', '*'],
				['*', '_', '*', '_', '*', '_', '*'], 
				['B', '*', 'B', '*', 'B', '*', 'B']],
				"W", False, [0,0], [2,2]),
			[[
				['W', '*', 'W', '*', 'W', '*', 'W'], 
				['*', '_', '*', '_', '*', '_', '*'], 
				['*', '*', '_', '*', '_', '*', '*'],
				['*', '_', '*', '_', '*', '_', '*'], 
				['B', '*', 'B', '*', 'B', '*', 'B']],
				"Invalid move"
			],
			None
		)
		

if __name__ == 'main':
	unittest.main()