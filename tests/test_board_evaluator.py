import sys
import math
import unittest

sys.path.insert(0, '..')

from src.engine.board_evaluator import *

class TestBoardEvaluator(unittest.TestCase):
	def test_neutral_score(self):
		self.assertEqual(
			evaluator([
				['W', '*', 'W', '*', 'W', '*', 'W'], 
				['*', '_', '*', '_', '*', '_', '*'], 
				['*', '*', '_', '*', '_', '*', '*'],
				['*', '_', '*', '_', '*', '_', '*'], 
				['B', '*', 'B', '*', 'B', '*', 'B']],
				"B", True),
			0,
			None
		)

		self.assertEqual(
			evaluator([
				['W', '*', 'W', '*', 'W', '*', 'W'], 
				['*', '_', '*', '_', '*', '_', '*'], 
				['*', '*', '_', '*', '_', '*', '*'],
				['*', '_', '*', '_', '*', '_', '*'], 
				['B', '*', 'B', '*', 'B', '*', 'B']],
				"W", False),
			0,
			None
		)

		self.assertEqual(
			evaluator([
				['W', '*', '_', '*', 'W', '*', 'W'], 
				['*', '_', '*', '_', '*', '_', '*'], 
				['*', '*', 'B', '*', 'W', '*', '*'],
				['*', '_', '*', '_', '*', '_', '*'], 
				['B', '*', '_', '*', 'B', '*', 'B']],
				"B", True),
			0,
			None
		)

		self.assertEqual(
			evaluator([
				['W', '*', '_', '*', 'W', '*', 'W'], 
				['*', '_', '*', '_', '*', '_', '*'], 
				['*', '*', 'B', '*', 'W', '*', '*'],
				['*', '_', '*', '_', '*', '_', '*'], 
				['B', '*', '_', '*', 'B', '*', 'B']],
				"W", False),
			0,
			None
		)

	def test_negative_score(self):
		self.assertEqual(
			evaluator([
				['W', '*', '_', '*', '_', '*', 'W'], 
				['*', '_', '*', '_', '*', '_', '*'], 
				['*', '*', '_', '*', '_', '*', '*'],
				['*', '_', '*', '_', '*', '_', '*'], 
				['B', '*', 'B', '*', 'W', '*', '_']],
				"B", True),
			-31,
			None
		)

		self.assertEqual(
			evaluator([
				['_', '*', 'W', '*', '_', '*', 'W'], 
				['*', '_', '*', '_', '*', '_', '*'], 
				['*', '*', '_', '*', '_', '*', '*'],
				['*', '_', '*', '_', '*', 'W', '*'], 
				['B', '*', 'B', '*', 'B', '*', '_']],
				"W", True),
			-math.inf,
			None
		)

		self.assertEqual(
			evaluator([
				['_', '*', 'W', '*', '_', '*', 'W'], 
				['*', 'B', '*', '_', '*', '_', '*'], 
				['*', '*', '_', '*', '_', '*', '*'],
				['*', '_', '*', '_', '*', '_', '*'], 
				['B', '*', '_', '*', 'B', '*', 'W']],
				"W", True),
			-3,
			None
		)

	def test_positive_score(self):
		self.assertEqual(
			evaluator([
				['B', '*', 'W', '*', '_', '*', 'W'], 
				['*', '_', '*', '_', '*', '_', '*'], 
				['*', '*', '_', '*', '_', '*', '*'],
				['*', '_', '*', '_', '*', 'W', '*'], 
				['B', '*', '_', '*', 'B', '*', '_']],
				"W", True),
			3,
			None
		)

		self.assertEqual(
			evaluator([
				['_', '*', 'W', '*', 'W', '*', 'W'], 
				['*', 'B', '*', '_', '*', '_', '*'], 
				['*', '*', 'W', '*', '_', '*', '*'],
				['*', '_', '*', '_', '*', '_', '*'], 
				['B', '*', '_', '*', '_', '*', '_']],
				"W", True),
			34,
			None
		)

		self.assertEqual(
			evaluator([
				['_', '*', 'W', '*', 'W', '*', 'W'], 
				['*', 'B', '*', '_', '*', '_', '*'], 
				['*', '*', '_', '*', '_', '*', '*'],
				['*', '_', '*', '_', '*', '_', '*'], 
				['B', '*', '_', '*', '_', '*', '_']],
				"W", True),
			math.inf,
			None
		)

if __name__ == 'main':
	unittest.main()